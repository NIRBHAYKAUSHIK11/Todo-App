{"version":3,"sources":["index.js"],"names":["AddTask","props","_this","Object","C_Users_LENOVO_Desktop_dev_TodoAppReact_todo_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","C_Users_LENOVO_Desktop_dev_TodoAppReact_todo_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","C_Users_LENOVO_Desktop_dev_TodoAppReact_todo_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","state","taskDesc","e","setState","target","value","handlerToCollectTaskInfo","_this2","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","type","onChange","handleTaskTextChange","onClick","handleAddTaskClick","React","Component","TaskList","handlerToCollectTaskClickInfo","_this3","list","_loop","i","task","tasks","spanAction","isFinished","class","handleTaskClick","desc","listItem","key","push","length","className","purpose","App","_this4","oldTasks","slice","newStatus","find","ot","_this5","todoTasks","filter","t","doneTasks","Fragment","handleNewTask","handleTaskStatusUpdate","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f8e0b17f.chunk.js","sourcesContent":["import ReactDOM from 'react-dom';\nimport React from 'react';\nimport './index.css'\n\nclass AddTask extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            taskDesc: ''\n        }\n    }\n    handleTaskTextChange(e){\n        this.setState({\n            taskDesc: e.target.value\n        })\n    }\n\n    handleAddTaskClick(){\n        this.props.handlerToCollectTaskInfo(this.state.taskDesc);\n        this.setState({\n            taskDesc: ''\n        })\n    }\n\n    render(){\n        return(\n            <form>\n                <input type=\"text\" value={this.state.taskDesc} onChange={(e) => this.handleTaskTextChange(e)} />\n                <input type=\"button\" value=\"Add Task\" onClick={() => this.handleAddTaskClick()}/>\n            </form>\n        )\n    }\n}\n\nclass TaskList extends React.Component {\n\n   handleTaskClick(taskDesc){\n        this.props.handlerToCollectTaskClickInfo(taskDesc);\n   }\n\n   render(){\n        let list = [];\n\n        for(let i = 0; i < this.props.tasks.length; i++){\n            let task = this.props.tasks[i];\n            let spanAction;\n\n            if(task.isFinished){\n                spanAction = (\n                    <span class=\"material-icons\" onClick={() => this.handleTaskClick(task.desc)}>close</span>\n                );\n            } else {\n                spanAction = (\n                    <span class=\"material-icons\" onClick={() => this.handleTaskClick(task.desc)}>done</span>\n                );\n            }\n\n            let listItem = (\n                <div key={i}>\n                    <span>{task.desc}</span>\n                    {spanAction}\n                </div>\n            );\n            list.push(listItem);\n        }\n\n        return(\n            <div className={this.props.purpose == \"Todo\"? \"todo\": \"finished\"}>\n                <div className=\"list-container\">\n                    <div className='title'>{this.props.purpose}</div>\n                    <div className='content'>\n                        {list}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nclass App extends React.Component {\n    constructor(props){\n        super(props);\n\n        this.state = {\n            tasks: [{\n                desc: 'Switch off light',\n                isFinished: false\n            }, {\n                desc: 'Turn on fan',\n                isFinished: false\n            }, {\n                desc: 'Make tea',\n                isFinished: true\n            }, {\n                desc: 'Make dinner',\n                isFinished: true\n            }]\n        }\n    }\n\n    handleNewTask(taskDesc){\n        let oldTasks = this.state.tasks.slice();\n\n        oldTasks.push({\n            desc: taskDesc,\n            isFinished: false\n        });\n        this.setState({\n            tasks: oldTasks\n        })\n    }\n\n    handleTaskStatusUpdate(taskDesc, newStatus){\n        let oldTasks = this.state.tasks.slice();\n\n        let taskItem = oldTasks.find(ot => ot.desc == taskDesc);\n        taskItem.isFinished = newStatus;\n\n        this.setState({\n            tasks: oldTasks\n        })\n    }\n\n    render(){\n       let tasks = this.state.tasks;\n       let todoTasks = tasks.filter(t => t.isFinished == false);\n       let doneTasks = tasks.filter(t => t.isFinished == true);\n\n       return (\n           <>\n              <div className=\"add-task\">\n                <AddTask handlerToCollectTaskInfo={(taskDesc) => this.handleNewTask(taskDesc)}/>\n              </div>\n              <div className='task-lists'>\n                <TaskList handlerToCollectTaskClickInfo={(taskDesc) => this.handleTaskStatusUpdate(taskDesc, true)} tasks={todoTasks} purpose=\"Todo\"/>\n                <TaskList handlerToCollectTaskClickInfo={(taskDesc) => this.handleTaskStatusUpdate(taskDesc, false)} tasks={doneTasks} purpose=\"Finished\"/>\n              </div>\n           </>\n       );\n    }\n}\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}